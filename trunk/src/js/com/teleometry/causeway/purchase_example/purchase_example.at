/**
 * AmbientTalk/2 Project
 * (c) Software Languages Lab, 2006 - 2009
 * Authors: Tom Van Cutsem, Ambient Group
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/* The E/Waterken Causeway purchase example rewritten in AmbientTalk.
 * This example is useful for getting to understand the Causeway debugger.
 *
 * This example creates 4 separate actors. The buyer actor then sends
 * a message to each of the three other actors and collects the replies
 * in an 'asyncand' abstraction.
 *
 * The example by default writes all four actor logs to your home directory.
 *
 * @author Tom Van Cutsem
 */

def home := jlobby.java.lang.System.getProperty("user.home");

// buyer process
def buyerP := actor: {
	def T := /.at.support.tracer("buyer", home).traceOn();
	
	def makeAsyncAnd(numExpected, callback) {
		if: (numExpected < 1) then: {
			callback<-run(true);
			object: { def run(answer) { } };
		} else: {
			object: {
			  def run(answer) {
				  if: (callback != nil) then: {
					  if: answer then: {
						  numExpected := numExpected - 1;
						  if: (numExpected <= 0) then: {
							  T.comment("happened: all true");
							  callback<-run(true);
							  callback := nil;
						  } else: {
							  T.comment("leadsto: all true");
						  }
					  } else: {
	              T.comment("found a false");
	              callback<-run(false);
	              callback := nil;
					  }
				  }
			  }
		  }	
		}
	};
	
	def go(inventory, creditBureau, shipper) {
		def teller := makeAsyncAnd(3, object: {
			def run(answer) {
				system.println("Got answer: " + answer);
				T.close(); // stop tracing
			}
		});
		
		inventory<-partInStock("partNo", teller);
		creditBureau<-checkCredit("name", teller);
		shipper<-canDeliver("profile", teller);		
	};
	
};

// product process
def productP := actor: {
	def T := /.at.support.tracer("product", home).traceOn();
	
	def partInStock(partNo, teller) {
		teller<-run(true); T.close();
	};
};

// accounts process
def accountP := actor: {
	def T := /.at.support.tracer("account", home).traceOn();
	
	def checkCredit(name, teller) {
		teller<-run(true); T.close();
	};
};

// shipper process
def shipperP := actor: {
	def T := /.at.support.tracer("shipper", home).traceOn();
	
	def canDeliver(profile, teller) {
		teller<-run(true); T.close();
	};
};

buyerP<-go(productP, accountP, shipperP)